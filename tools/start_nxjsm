#!/bin/sh

#set -x

export VST_PATH="$HOME/VST:/usr/share/vst"
export PATH=".:/home/xj/Muzyka/fsthost/trunk:$PATH"
#export PATH="/home/studio/SVN/fhctrl:/media/bigpig/secure/XJ/lvst/fsthost/trunk:$PATH"
export FSTHOST_GUI=0
export WINE_RT=${WINE_RT:-10}
export WINE_SRV_RT=${WINE_SRV_RT:-15}

MODE=$1
SES_PATH=${2%/}
LOGDIR='/tmp/log'

exists() {
	type $1 >/dev/null 2>&1
}

detect_xterminal() {
	if exists 'xfce4-terminal'; then
		XTERM='xfce4-terminal --geometry 132x43 --disable-server -x'
	elif exists 'gnome-terminal'; then
		XTERM='gnome-terminal --geometry 132x43 -x'
	elif exists 'xterm'; then
		XTERM='xterm -geometry 132x43 -e'
	elif exists 'tmux'; then
		XTERM='start_in_tmux'
	elif exists 'screen'; then
		XTERM='screen -T xterm-color -Dm'
	else
		echo 'Cannot detect xterminal'
		return 1
	fi

	export XTERM
	return 0
}

usage() {
#	echo "Usage: $0 load|save SessionPath"
	echo "Usage: $0 load SessionPath"
	exit 1
}

start_in_tmux() {
	tmux new -d -x132 -y43 "$*"
}

check_jack() {
	jack_wait -c 2>/dev/null | grep -q '^running'
}

start_jack() {
	if check_jack; then
		echo 'Jack Running'
		return 0
	fi

	if [ ! -r $HOME/.jackdrc ]; then
		echo "No file $HOME/.jackdrc"
		return 1
	fi
	(nohup sh -c ". $HOME/.jackdrc" > /tmp/jackd.$LOGNAME.log 2>&1 &)
	jack_wait -w

	return 0
}

start_wine() {
	echo 'Starting WineServer in persistent mode'
	wineboot; EXC=$?
	if [ $EXC -ne 0 ]; then
		echo "Wineboot | EXC: $EXC"
		return 1
	fi
	wineserver -p; EXC=$?
	if [ $EXC -ne 0 -a $EXC -ne 2 ]; then
		echo "Wineserver | EXC: $EXC"
		return 1
	fi
        return 0
}

start_ses() {
	echo "Starting session: ${SES_PATH}"
	nxjsm "$SES_PATH" || return 1
	return 0
}

# Params: path
ses_clean() {
	if [ -d "$1" ]; then
		echo "Clean directory $1"
		rm -fr "$1"
	fi
}

# Params: src dst
ses_move() {
	if [ -d "$1" ]; then
		echo "Move session directory $1 $2"
		mv "$1" "$2"
	fi
}

ses_save() {
	ses_clean "${SES_PATH}.old"
	ses_move "${SES_PATH}" "${SES_PATH}.old"

	mkdir "${SES_PATH}"

	if fhctrl_sn save "${SES_PATH}" > "${SES_PATH}/session.sh"; then
		echo 'Session Saved'
		ses_clean "${SES_PATH}.broken"
		return 0
	else
		echo 'Fail - session is broken'
		ses_clean "${SES_PATH}.broken"
		ses_move "${SES_PATH}" "${SES_PATH}.broken"
		ses_move "${SES_PATH}.old" "${SES_PATH}"
		return 1
	fi
}

[ -z "$MODE" -o -z "$SES_PATH" ] && usage

if [ ! -d "$LOGDIR" ] && ! mkdir "$LOGDIR"; then
	echo "Log Directory doesn't exists, and can't create it $LOGDIR"
	exit 1
fi

case $MODE in
	'load')
		detect_xterminal || exit 1
		start_jack || exit 2
		start_wine || exit 3
		start_ses || exit 4
		;;
#	'save') ses_save || exit 5;;
	*) usage
esac
